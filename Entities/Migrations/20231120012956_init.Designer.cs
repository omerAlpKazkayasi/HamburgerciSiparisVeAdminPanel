// <auto-generated />
using System;
using Entitiess.Concrete.DBcontext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231120012956_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Concrete.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CartId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Entities.Concrete.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Menü"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Hamburger"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "İçecek"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Yan Ürünler"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IngredientId"));

                    b.Property<string>("IngredientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");

                    b.HasData(
                        new
                        {
                            IngredientId = 1,
                            IngredientName = "Domates"
                        },
                        new
                        {
                            IngredientId = 2,
                            IngredientName = "Marul"
                        },
                        new
                        {
                            IngredientId = 3,
                            IngredientName = "Soğan"
                        },
                        new
                        {
                            IngredientId = 4,
                            IngredientName = "Turşu"
                        },
                        new
                        {
                            IngredientId = 5,
                            IngredientName = "Ketçap"
                        },
                        new
                        {
                            IngredientId = 6,
                            IngredientName = "Mayonez"
                        },
                        new
                        {
                            IngredientId = 7,
                            IngredientName = "Hardal"
                        },
                        new
                        {
                            IngredientId = 8,
                            IngredientName = "BBQ"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Concrete.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RemovedIngredients")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Entities.Concrete.OrderIngredient", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("OrderIngredients");
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SizeId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2,
                            ImagePath = "https://www.meatpoultry.com/ext/resources/MPImages/01-2019/011419/burger-king-big-king-xl.jpg?height=690&t=1547844197&width=690",
                            Price = 50m,
                            ProductName = "Big King"
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            ImagePath = "https://i11.haber7.net//haber/haber7/photos/2022/04/JozAc_1643016662_672.jpg",
                            Price = 50m,
                            ProductName = "King Chicken"
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2,
                            ImagePath = "https://scontent.fsaw3-1.fna.fbcdn.net/v/t1.6435-9/118476354_625089371711845_2916870861001443404_n.jpg?_nc_cat=110&ccb=1-7&_nc_sid=c2f564&_nc_ohc=QBBQh0dPGXYAX9XQeq6&_nc_oc=AQniBnoWdiI9htzuyhm9bLfmDbwXRGsF46CKj5tGMHMPSvHj1-Fdc6N2WDo2Cq8aOjY&_nc_ht=scontent.fsaw3-1.fna&oh=00_AfDmazTiUzJPcRu2x87ZE0FDSpBh1CQG9u945Jhfsjr-JQ&oe=65804BA6",
                            Price = 50m,
                            ProductName = "Cheese Burger"
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2,
                            ImagePath = "https://media.istockphoto.com/id/1309352410/tr/foto%C4%9Fraf/ah%C5%9Fap-tahta-%C3%BCzerinde-domates-ve-marul-ile-%C3%A7izburger.jpg?s=612x612&w=0&k=20&c=T_95-FkIT_MeNDK6WrHwQDXRpdT7tdsW3iPTtFxoL4Y=",
                            Price = 50m,
                            ProductName = "Whopper Burger"
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1,
                            ImagePath = "https://koctas-img.mncdn.com/mnpadding/1200/1200/ffffff/productimages/5000061098/5000061098_1_MC/8875210145842_1686903008750.jpg",
                            Price = 70m,
                            ProductName = "Whopper Menü",
                            SizeId = 1
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 1,
                            ImagePath = "https://koctas-img.mncdn.com/mnpadding/1200/1200/ffffff/productimages/5000061098/5000061098_1_MC/8875210145842_1686903008750.jpg",
                            Price = 80m,
                            ProductName = "Whopper Menü",
                            SizeId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 1,
                            ImagePath = "https://koctas-img.mncdn.com/mnpadding/1200/1200/ffffff/productimages/5000061098/5000061098_1_MC/8875210145842_1686903008750.jpg",
                            Price = 90m,
                            ProductName = "Whopper Menü",
                            SizeId = 3
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 1,
                            ImagePath = "https://nova.menuqrkod.com/wp-content/uploads/2023/05/Fast_food_French_fries_Beer_Hamburger_Highball_524931_3840x2160-scaled.jpg",
                            Price = 60m,
                            ProductName = "King Chicken Menü",
                            SizeId = 1
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 1,
                            ImagePath = "https://nova.menuqrkod.com/wp-content/uploads/2023/05/Fast_food_French_fries_Beer_Hamburger_Highball_524931_3840x2160-scaled.jpg",
                            Price = 70m,
                            ProductName = "King Chicken Menü",
                            SizeId = 2
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 1,
                            ImagePath = "https://nova.menuqrkod.com/wp-content/uploads/2023/05/Fast_food_French_fries_Beer_Hamburger_Highball_524931_3840x2160-scaled.jpg",
                            Price = 80m,
                            ProductName = "King Chicken Menü",
                            SizeId = 3
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 1,
                            ImagePath = "https://iahbr.tmgrup.com.tr/album/2019/05/12/kansere-sebep-olan-besinler-hangileri-1557653689109.jpg",
                            Price = 100m,
                            ProductName = "FÖHM Menü",
                            SizeId = 1
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 1,
                            ImagePath = "https://iahbr.tmgrup.com.tr/album/2019/05/12/kansere-sebep-olan-besinler-hangileri-1557653689109.jpg",
                            Price = 120m,
                            ProductName = "FÖHM Menü",
                            SizeId = 2
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 1,
                            ImagePath = "https://iahbr.tmgrup.com.tr/album/2019/05/12/kansere-sebep-olan-besinler-hangileri-1557653689109.jpg",
                            Price = 140m,
                            ProductName = "FÖHM Menü",
                            SizeId = 3
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 4,
                            ImagePath = "https://img.ekonomim.com/storage/files/images/2023/05/05/patates-kizartma-SPOf_cover.jpg",
                            Price = 15m,
                            ProductName = "Patates Kızartması"
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 4,
                            ImagePath = "https://www.cumhuriyet.com.tr/Archive/2023/9/9/2117608/kapak_185057.jpg",
                            Price = 20m,
                            ProductName = "Soğan Halkası"
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 4,
                            ImagePath = "https://yemek.com/_next/image/?url=https%3A%2F%2Fcdn.yemek.com%2Fmnresize%2F1250%2F833%2Fuploads%2F2022%2F12%2Fcitir-tavuk-sevim.jpg&w=1920&q=75",
                            Price = 30m,
                            ProductName = "Çıtır Tavuk"
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 4,
                            ImagePath = "https://www.ardaninmutfagi.com/wp-content/uploads/2022/05/tavuk-nugget-i7.jpg",
                            Price = 30m,
                            ProductName = "Nugget"
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 3,
                            ImagePath = "https://canaciktim.com/uploads/urun/5ecd2186ba534_kutu-kola.jpg",
                            Price = 20m,
                            ProductName = "Cola",
                            SizeId = 1
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 3,
                            ImagePath = "https://canaciktim.com/uploads/urun/5ecd2186ba534_kutu-kola.jpg",
                            Price = 25m,
                            ProductName = "Cola",
                            SizeId = 2
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 3,
                            ImagePath = "https://canaciktim.com/uploads/urun/5ecd2186ba534_kutu-kola.jpg",
                            Price = 30m,
                            ProductName = "Cola",
                            SizeId = 3
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 3,
                            ImagePath = "https://canaciktim.com/uploads/urun/5ecd21cf95086_fanta.jpg",
                            Price = 20m,
                            ProductName = "Fanta",
                            SizeId = 1
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 3,
                            ImagePath = "https://canaciktim.com/uploads/urun/5ecd21cf95086_fanta.jpg",
                            Price = 25m,
                            ProductName = "Fanta",
                            SizeId = 2
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 3,
                            ImagePath = "https://canaciktim.com/uploads/urun/5ecd21cf95086_fanta.jpg",
                            Price = 30m,
                            ProductName = "Fanta",
                            SizeId = 3
                        });
                });

            modelBuilder.Entity("Entities.Concrete.ProductIngredient", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "IngredientId");

                    b.HasIndex("IngredientId");

                    b.ToTable("ProductIngredients");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 1,
                            IngredientId = 3
                        },
                        new
                        {
                            ProductId = 1,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 1,
                            IngredientId = 5
                        },
                        new
                        {
                            ProductId = 1,
                            IngredientId = 6
                        },
                        new
                        {
                            ProductId = 2,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 2,
                            IngredientId = 3
                        },
                        new
                        {
                            ProductId = 2,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 2,
                            IngredientId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            IngredientId = 6
                        },
                        new
                        {
                            ProductId = 3,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            IngredientId = 3
                        },
                        new
                        {
                            ProductId = 3,
                            IngredientId = 6
                        },
                        new
                        {
                            ProductId = 3,
                            IngredientId = 7
                        },
                        new
                        {
                            ProductId = 3,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 4,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            IngredientId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 4,
                            IngredientId = 5
                        },
                        new
                        {
                            ProductId = 4,
                            IngredientId = 6
                        },
                        new
                        {
                            ProductId = 4,
                            IngredientId = 7
                        },
                        new
                        {
                            ProductId = 4,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 5,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            IngredientId = 3
                        },
                        new
                        {
                            ProductId = 5,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 5,
                            IngredientId = 7
                        },
                        new
                        {
                            ProductId = 5,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 6,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 6,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 6,
                            IngredientId = 3
                        },
                        new
                        {
                            ProductId = 6,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 6,
                            IngredientId = 7
                        },
                        new
                        {
                            ProductId = 6,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 7,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 7,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 7,
                            IngredientId = 3
                        },
                        new
                        {
                            ProductId = 7,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 7,
                            IngredientId = 7
                        },
                        new
                        {
                            ProductId = 7,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 8,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 8,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 8,
                            IngredientId = 6
                        },
                        new
                        {
                            ProductId = 9,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 9,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 9,
                            IngredientId = 6
                        },
                        new
                        {
                            ProductId = 10,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 10,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 10,
                            IngredientId = 6
                        },
                        new
                        {
                            ProductId = 11,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 11,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 11,
                            IngredientId = 3
                        },
                        new
                        {
                            ProductId = 11,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 11,
                            IngredientId = 5
                        },
                        new
                        {
                            ProductId = 11,
                            IngredientId = 6
                        },
                        new
                        {
                            ProductId = 11,
                            IngredientId = 7
                        },
                        new
                        {
                            ProductId = 11,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 12,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 12,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 12,
                            IngredientId = 3
                        },
                        new
                        {
                            ProductId = 12,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 12,
                            IngredientId = 5
                        },
                        new
                        {
                            ProductId = 12,
                            IngredientId = 6
                        },
                        new
                        {
                            ProductId = 12,
                            IngredientId = 7
                        },
                        new
                        {
                            ProductId = 12,
                            IngredientId = 8
                        },
                        new
                        {
                            ProductId = 13,
                            IngredientId = 1
                        },
                        new
                        {
                            ProductId = 13,
                            IngredientId = 2
                        },
                        new
                        {
                            ProductId = 13,
                            IngredientId = 3
                        },
                        new
                        {
                            ProductId = 13,
                            IngredientId = 4
                        },
                        new
                        {
                            ProductId = 13,
                            IngredientId = 5
                        },
                        new
                        {
                            ProductId = 13,
                            IngredientId = 6
                        },
                        new
                        {
                            ProductId = 13,
                            IngredientId = 7
                        },
                        new
                        {
                            ProductId = 13,
                            IngredientId = 8
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeId"));

                    b.Property<string>("SizeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeId");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            SizeId = 1,
                            SizeName = "Küçük"
                        },
                        new
                        {
                            SizeId = 2,
                            SizeName = "Orta"
                        },
                        new
                        {
                            SizeId = 3,
                            SizeName = "Büyük"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Concrete.Cart", b =>
                {
                    b.HasOne("Entities.Concrete.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("Entities.Concrete.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concrete.CartItem", b =>
                {
                    b.HasOne("Entities.Concrete.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.HasOne("Entities.Concrete.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concrete.OrderDetail", b =>
                {
                    b.HasOne("Entities.Concrete.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Concrete.OrderIngredient", b =>
                {
                    b.HasOne("Entities.Concrete.Ingredient", "Ingredient")
                        .WithMany("OrderIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.OrderDetail", "OrderDetail")
                        .WithMany("OrderIngredients")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.HasOne("Entities.Concrete.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Size", "Size")
                        .WithMany("Products")
                        .HasForeignKey("SizeId");

                    b.Navigation("Category");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Entities.Concrete.ProductIngredient", b =>
                {
                    b.HasOne("Entities.Concrete.Ingredient", "Ingredient")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Product", "Product")
                        .WithMany("ProductIngredients")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Concrete.Ingredient", b =>
                {
                    b.Navigation("OrderIngredients");

                    b.Navigation("ProductIngredients");
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Entities.Concrete.OrderDetail", b =>
                {
                    b.Navigation("OrderIngredients");
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductIngredients");
                });

            modelBuilder.Entity("Entities.Concrete.Size", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
